// Generated by CoffeeScript 1.3.3
(function() {
  var Dialog, T,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  T = require("node-term-ui");

  Dialog = (function(_super) {

    __extends(Dialog, _super);

    function Dialog(opts) {
      Dialog.__super__.constructor.call(this, opts);
      this.botRightCorner = this.botLeftCorner = this.topRightCorner = this.topLeftCorner = T.B(3, 3, 3, 3);
      this._optionBoxes = [];
    }

    Dialog.prototype.draw = function() {
      Dialog.__super__.draw.call(this);
      this.rightX = this.bounds.x + this.bounds.w - 1;
      this.botY = this.bounds.y + this.bounds.h - 1;
      this.drawOptions();
      return this;
    };

    Dialog.prototype.drawBorders = function() {
      var botY, rightX;
      Dialog.__super__.drawBorders.call(this);
      T.saveFg().fg(this.borderColor);
      T.pos(this.bounds.x - 1, this.bounds.y).out(T.B(0, 3, 3, 0)).pos(this.bounds.x - 1, this.bounds.y - 1).out(T.B(0, 3, 0, 3)).pos(this.bounds.x, this.bounds.y - 1).out(T.B(3, 0, 0, 3)).pos(this.bounds.x + 1, this.bounds.y).out(T.B(3, 3, 0, 0));
      rightX = this.bounds.x + this.bounds.w - 1;
      T.pos(rightX + 1, this.bounds.y).out(T.B(3, 0, 3, 0)).pos(rightX + 1, this.bounds.y - 1).out(T.B(3, 0, 0, 3)).pos(rightX, this.bounds.y - 1).out(T.B(0, 3, 0, 3)).pos(rightX - 1, this.bounds.y).out(T.B(3, 3, 0, 0));
      botY = this.bounds.y + this.bounds.h - 1;
      T.pos(rightX + 1, botY).out(T.B(3, 0, 0, 3)).pos(rightX + 1, botY + 1).out(T.B(3, 0, 3, 0)).pos(rightX, botY + 1).out(T.B(0, 3, 3, 0)).pos(rightX - 1, botY).out(T.B(3, 3, 0, 0));
      T.pos(this.bounds.x - 1, botY).out(T.B(0, 3, 0, 3)).pos(this.bounds.x - 1, botY + 1).out(T.B(0, 3, 3, 0)).pos(this.bounds.x, botY + 1).out(T.B(3, 0, 3, 0)).pos(this.bounds.x + 1, botY).out(T.B(3, 3, 0, 0));
      return T.restoreFg();
    };

    Dialog.prototype.setOptions = function(options) {
      var box, handler, option, _i, _len, _ref, _ref1;
      _ref = this._optionBoxes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        box.destroy();
      }
      this.dialogOptions = options;
      this._optionBoxes = [];
      _ref1 = this.dialogOptions;
      for (option in _ref1) {
        handler = _ref1[option];
        this._optionBoxes.push(box = new T.Box({
          ellipsizeContent: false,
          bounds: {
            w: "fit",
            h: "fit"
          },
          borders: {
            t: false
          },
          content: [option]
        }));
        box.onKey_space = handler;
      }
      box.focus();
      return this.drawOptions();
    };

    Dialog.prototype.drawOptions = function() {
      var curX, option, _i, _len, _ref;
      curX = this.rightX - 2;
      _ref = this._optionBoxes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        curX -= option.bounds.w;
        option.setBounds({
          x: curX,
          y: this.botY
        });
        T.pos(curX, this.botY).out(T.B(1, 1, 0, 1));
        T.pos(curX + option.bounds.w - 1, this.botY).out(T.B(1, 1, 0, 1));
      }
      return this;
    };

    Dialog.prototype.focus = function() {
      Dialog.__super__.focus.call(this);
      this.drawOptions();
      return this;
    };

    Dialog.prototype.blur = function() {
      Dialog.__super__.blur.call(this);
      this.drawOptions();
      return this;
    };

    return Dialog;

  })(T.Box);

  module.exports = Dialog;

}).call(this);

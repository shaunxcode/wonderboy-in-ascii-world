// Generated by CoffeeScript 1.3.3
(function() {
  var Dialog, Mode, STATE, T, centerText, draw, getCenterX, getCenterY, mode, transition, _center;

  T = require("node-term-ui");

  Dialog = require("./Dialog");

  _center = function(max, len) {
    if (len == null) {
      len = 0;
    }
    return ((max / 2) - (len / 2)) + 1;
  };

  getCenterX = function(len) {
    return _center(T.width, len);
  };

  getCenterY = function(len) {
    return _center(T.height, len);
  };

  centerText = function(y, text) {
    return T.pos(getCenterX(text.length), y).out(text);
  };

  Mode = {
    titleScreen: {
      init: function() {},
      draw: function() {
        var mv;
        T.clear();
        T.hideCursor();
        mv = getCenterY();
        centerText(mv, "wonderboy-in-ascii-world");
        return centerText(mv + 1, "press any key to start");
      },
      keypress: function(char, key) {
        return transition(Mode.startGame);
      }
    },
    startGame: {
      draw: function() {
        var story;
        T.clear();
        story = new Dialog({
          bounds: {
            w: 65,
            h: 10,
            x: getCenterX(65),
            y: getCenterY(25)
          },
          content: ["Shion has awoken once again.", "This time his surroundings are both familiar and yet not.", "After defeating BioMeka and the Demon King shion finds himself", "washed up on the shore of a strange island made of text.", "", "Equipped with nothing but a sword and and old pair of sneakers", "your adventure begins!"]
        });
        return story.draw().focus();
      }
    },
    globe: function() {},
    overworld: function() {},
    locality: function() {},
    building: function() {}
  };

  STATE = {};

  mode = Mode.titleScreen;

  transition = function(newMode) {
    if (typeof mode.leave === "function") {
      mode.leave(STATE);
    }
    mode = newMode;
    if (typeof mode.enter === "function") {
      mode.enter(STATE);
    }
    if (typeof mode.init === "function") {
      mode.init(STATE);
    }
    return draw();
  };

  (draw = function() {
    return mode.draw(STATE);
  })();

  T.on("keypress", function(char, key) {
    return typeof mode.keypress === "function" ? mode.keypress(char, key) : void 0;
  });

  T.on("resize", draw);

}).call(this);
